Console.WriteLine("-----------------Display symbols and codes-----------------");

/******************************************************************************************************
    1. Объявите переменные типа "char", которые содержат следующие символы:
           - маленькую букву "j"
           - большую букву "Ю"
           - цифру "0"
           - символ ":"
           - символ "@"
           - символ "\"
           - символ "%"
           - символ "*"
           - символ "'"
           - символ параграфа "§"
           - символ плюс/минус "±"
           - символ авторского права ©
           - символ рубля

       Дайте переменным осмысленные имена.
       Выведите в консоль сам символ, а также его числовой код.
******************************************************************************************************/

char letterJ = 'j';
char letterYu = 'Ю';
char symbolZero = '0';
char symbolColon = ':';
char symbolAt = '@';
char symbolSlash = '\\';        // Для обратного слеша необходимо экранирование
char symbolPercent = '%';
char symbolAsterisk = '*';
char symbolSingleQuote = '\'';  // Для одинарной кавычки необходимо экранирование
char symbolSection = '§';
char symbolPlusMinus = '±';
char symbolCopyright = '©';
char symbolRuble = '₽';

// Используется конкатенация строк для вывода самого символа и его кода в скобках в одной строке.
// Но, если вы вывели в разных строках, то это тоже приемлемо. 
Console.WriteLine($"{letterJ} ({(int)letterJ})");
Console.WriteLine($"{letterYu} ({(int)letterYu})");
Console.WriteLine($"{symbolZero} ({(int)symbolZero})");
Console.WriteLine($"{symbolColon} ({(int)symbolColon})");
Console.WriteLine($"{symbolAt} ({(int)symbolAt})");
Console.WriteLine($"{symbolSlash} ({(int)symbolSlash})");
Console.WriteLine($"{symbolPercent} ({(int)symbolPercent})");
Console.WriteLine($"{symbolAsterisk} ({(int)symbolAsterisk})");
Console.WriteLine($"{symbolSingleQuote} ({(int)symbolSingleQuote})");
Console.WriteLine($"{symbolSection} ({(int)symbolSection})");
Console.WriteLine($"{symbolPlusMinus} ({(int)symbolPlusMinus})");
Console.WriteLine($"{symbolCopyright} ({(int)symbolCopyright})");
Console.WriteLine($"{symbolRuble} ({(int)symbolRuble})");


/******************************************************************************************************
    2. Вам даны десятичные коды символов:
           - 123
           - 39
           - 126
           - 1066
           - 35
           - 94
           - 47

       Выведите в консоль сами символы.
******************************************************************************************************/

Console.WriteLine("\n-----------------Symbols from codes-----------------");

Console.WriteLine((char)123);
Console.WriteLine((char)39);
Console.WriteLine((char)126);
Console.WriteLine((char)1066);
Console.WriteLine((char)35);
Console.WriteLine((char)94);
Console.WriteLine((char)47);


/************************************************************
    3. Выведите 13-ю строчную букву английского алфавита.
************************************************************/

Console.WriteLine("\n-----------------The 13th letter of the English alphabet-----------------");

/*
    Можно конечно посчитать вручную и вывести соответсвующий символ в консоль, но можно сделать и по-другому.
    Буквы идут в таблице по порядку, а значит, чтобы найти 13-ю, нам просто нужно прибавить 13 к букве 'a' и вычесть 1.
    Но, будьте внимательны. При арифметических операциях операнды, включая "char", "подтягиваются" до типа "int", а значит
    и результат будет типа "int", то есть, код символа. Так как нам нужен именно сам символ, нам нужно привести
    получившийся код обратно к "char".
*/
Console.WriteLine((char)('a' + 13 - 1));


/**********************************************************************
    4. Выведите символ, который идёт сразу после заглавной буквы 'Z'.
**********************************************************************/

Console.WriteLine("\n-----------------The symbol after 'Z'-----------------");

char letterZ = 'Z';
Console.WriteLine(++letterZ);


/*******************************************************************************************************
    5. Подсчитайте и выведите в консоль количество букв русского алфавита.
       5.1 Верный ли ответ у вас получился? Выведите в консоль все буквы русского алфавита
           и определите какой буквы не хватает.
       5.2 Определите и выведите в консоль код пропущенной буквы. Почему она не попала в вывод выше?
*******************************************************************************************************/

Console.WriteLine("\n-----------------Russian alphabet-----------------");

/*
    Буквы идут в таблице по порядку, поэтому мы просто можем вычесть из буквы 'Я' (заглавной или строчной)
    букву 'А' (заглавную или строчную соответственно). Ну и чтобы получить верный ответ, нам также нужно
    прибавить 1, аналогично как мы делали на уроке для английского алфавита.
 */
Console.WriteLine('Я' - 'А' + 1);

/*
    Мы получили в ответе 32, хотя знаем, что в русском алфавите 33 буквы.
    Давайте выведем весь алфавит в консоль и поймём, какой же буквы всё-таки не хватает.
    Для подсчёта количества букв мы использовали заглавные буквы, поэтому при выводе будем использовать их же.
    Начинаем с буквы 'А' и выводим все символы до буквы 'Я' включительно. Это делается с помощью цикла "for",
    аналогично как мы делали на уроке для английского алфавита.
 */
for (char letter = 'А'; letter <= 'Я'; letter++)
{
    Console.Write(letter);
}

// Вставка разрыва строки после вывода алфавита. Иначе следующий вывод произойдёт на той же строке,
// потому что для вывода алфавита использовался метод "Write", а не "WriteLine".
Console.WriteLine();

// Из вывода выше мы видим, что не хватает буквы 'Ё'. Давайте выведем её код в консоль.
Console.WriteLine((int)'Ё');

// Как видим, буква 'Ё' имеет код 1025. Если вы загляните в таблицу Unicode, то увидите, что она находится вне основного алфавита,
// поэтому она и не отобразилась при его выводе. Это справедливо как для прописных, так и для строчных букв.


/********************************************************************************************************************************
    6. Вам дан символ '7', но вам нужно именно число 7 типа "int". Как бы вы могли сконвертировать символ цифры в саму цифру?
       Внимание, вы должны получить не числовой код символа, а именно ту же цифру, которую представляет символ.
       Могли бы вы предложить более одного варианта?
********************************************************************************************************************************/

Console.WriteLine("\n-----------------Digit symbol to digit-----------------");

char digitSymbol = '7';

/*
    Вариант 1. В типе "char" существует специальный метод для такого преобразования.
    Единственное, он возвращает "double", а не "int", но мы просто можем применить явное преобразование.
 */
{
    int digit = (int)char.GetNumericValue(digitSymbol);
    Console.WriteLine(digit);
}

/*
    Вариант 2. Этот вариант более интересный. Мы знаем, что все цифры от 0 до 9 в таблице Unicode идут по порядку.
    Таким образом, если мы вычтем из нашего символа '7' (справедливо для любой цифры) символ цифры '0', то мы
    как раз и получим нужную нам цифру. Давайте разберём подробнее, как это работает. Как мы помним, все арифметические
    операции выполняются над кодами символов. Соответственно, когда мы вычитаем один символ из другого, у нас вычитаются их коды.
    Код символа '7' - это 55, а код символа '0' - это 48. Хотя абсолютные значения кодов здесь не важны, они могли бы быть любыми.
    Тут главное, что символы всех цифр идут по порядку. Ну и при вычитании '7' - '0' у нас фактически будет выполняться выражение
    55 - 48, что как раз равно 7. И это сразу будет нужный нам тип "int", так как при арифметических операциях операнды
    "подтягиваются" до типа "int", а значит и результат будет типа "int".
 */
{
    int digit = digitSymbol - '0';
    Console.WriteLine(digit);
}


/********************************************************************************************
    7. При сравнении букв русского алфавита в строках ниже я получаю неожиданный результат.
       Объясните такое поведение.
********************************************************************************************/

Console.WriteLine("\n-----------------Letters comparison-----------------");

// Ожидается "True", так как 'ю' в алфавите идёт позже "ё", но выводится почему-то "False".
Console.WriteLine('ю' > 'ё');   // False

/*
    "False" выводится, потому что строчная "ё" идёт в таблице Unicode вне основного алфавита. Она идёт после него.
    То есть, её код больше всех остальных букв, как строчных, так и прописных. А так как сравнение символов
    происходит именно по кодам, то при сравнении она будет больше всех остальных букв.
*/


// При этом, если я сравниваю 'ю' с заглавной буквой 'Ё', то выводится "True".
Console.WriteLine('ю' > 'Ё');   // True

/*
    Тут ситуация обратная. Заглавная буква 'Ё' также находится вне основного алфавита, но она, наоборот, идёт раньше всех
    остальных, как строчных так и заглавных букв. Поэтому, она при сравнении будет, наоборот, всегда меньше всех остальных букв.
*/


// Более того, в строке ниже я сравниваю 'А' c 'Ё' и ожидаю получить "True", так как 'А' идёт в алфавите раньше 'Ё', но почему-то получаю "False".
Console.WriteLine('А' < 'Ё');   // False

/*
    Тут ответ вытекает из предыдущего объяснения. Заглавная буква 'Ё' находится вне основного алфавита, и идёт раньше всех
    остальных, как строчных так и заглавных букв, поэтому она всегда будет меньше всех остальных букв.
 */


// При этом 'ё' и 'Ё' почему-то не равны между собой.
Console.WriteLine('ё' == 'Ё');  // False

/*
    Тут совсем всё просто. Заглавные и строчные буквы - это разные символы, и соответственно имеют разные числовые коды,
    поэтому они всегда будут не равны между собой.
 */


/***************************************************************
    8. Используйте 16-ричные коды для ввода символов ниже:
           - символ градуса "°"
           - символ числа PI "π"
           - символ многоточия "…"
           - символ интеграла "∫"
           - символ звезды "★"
           - символ мира "☮"

       Проверьте введённые символы в отладчике.
***************************************************************/

char symbolDegree = '\u00B0';
char symbolPi = '\u03C0';
char symbolEllipsis = '\u2026';
char symbolIntegral = '\u222B';
char symbolStar = '\u2605';
char symbolPeace = '\u262E';


/****************************************************************************************************
    9. В коде ниже я пытаюсь присвоить символ игральной кости переменной типа "char", но почему-то
       получаю ошибку компиляции. Почему так происходит? Раскомментируйте и исправьте код.
****************************************************************************************************/

/*
    Дело в том, что символ игральной кости кодируется 4-мя, а не 2-мя байтами, то есть, как бы, сразу двумя
    символами типа "char". Это, так называемая, суррогатная пара. Ну а так как тип "char" может содержать 
    только один символ, то мы получаем соответствующую ошибку компиляции.
    Для исправления нам нужно сменить тип на "string" и заключить символ в двойные, а не в одинарные кавычки.
 */
string symbolDice = "🎲";

/**************************************************************************************
    10. Ниже в консоль выводится четверостишие, но оно выводится одной строкой.
        Приведите его к виду ниже. Также стих должен быть сдвинут вправо относительно
        начала строки на один знак табуляции.

            Ночь, улица, фонарь, аптека,
            Бессмысленный и тусклый свет.
            Живи еще хоть четверть века
            Все будет так. Исхода нет.
           
**************************************************************************************/

Console.WriteLine("\n-----------------Control escape sequences-----------------");

Console.WriteLine("\n\tНочь, улица, фонарь, аптека,\n\tБессмысленный и тусклый свет.\n\tЖиви еще хоть четверть века\n\tВсе будет так. Исхода нет.");


/*******************************************************************
    11. Объясните, почему в консоли я вижу только слово "World!".
*******************************************************************/

Console.WriteLine("\nHello,\rWorld!");

/*
    Escape-последовательность "\r" означает возврат каретки, то есть, возврат курсора в начало строки.
    После того как в консоль выведется "Hello,", курсор встаёт опять в начало строки, и следующее слово
    "World!" просто перезатирает уже напечатанное слово "Hello,", поэтому вы видим только "World!"
 */


/***********************************************************************************************************
    12. Исследование членов типа "char":
        12.1. Найдите и попробуйте метод, проверяющий, является ли символ буквой.
        12.2. Найдите и попробуйте метод, проверяющий, является ли символ знаком пунктуации.
        12.3. Найдите и попробуйте метод, проверяющий, является ли символ управляющим символом.
        12.4. Найдите и попробуйте метод, возвращаюций категорию Unicode-символа.
        12.5. Найдите и попробуйте метод, определяющий, находится ли символ между двух других символов.
        12.6. Найдите и попробуйте метод, приводящий букву к нижнему регистру.
***********************************************************************************************************/

Console.WriteLine("\n-----------------Char members-----------------");

// 12.1. Найдите и попробуйте метод, проверяющий, является ли символ буквой.
Console.WriteLine("\n-----------------IsLetter-----------------");

Console.WriteLine(char.IsLetter('э'));
Console.WriteLine(char.IsLetter(':'));
Console.WriteLine(char.IsLetter('Y'));
Console.WriteLine(char.IsLetter('0'));

// 12.2. Найдите и попробуйте метод, проверяющий, является ли символ знаком пунктуации.
Console.WriteLine("\n-----------------IsPunctuation-----------------");

Console.WriteLine(char.IsPunctuation(','));
Console.WriteLine(char.IsPunctuation(';'));
Console.WriteLine(char.IsPunctuation('$'));
Console.WriteLine(char.IsPunctuation('!'));
Console.WriteLine(char.IsPunctuation('…'));

// 12.3. Найдите и попробуйте метод, проверяющий, является ли символ управляющим символом.
Console.WriteLine("\n-----------------IsControl-----------------");

Console.WriteLine(char.IsControl('\n'));
Console.WriteLine(char.IsControl('\t'));
Console.WriteLine(char.IsControl('∫'));
Console.WriteLine(char.IsControl('\b'));
Console.WriteLine(char.IsControl('\a'));
Console.WriteLine(char.IsControl('\u000A'));

// 12.4. Найдите и попробуйте метод, возвращаюций категорию Unicode-символа.
Console.WriteLine("\n-----------------GetUnicodeCategory-----------------");

Console.WriteLine(char.GetUnicodeCategory('\n'));
Console.WriteLine(char.GetUnicodeCategory('5'));
Console.WriteLine(char.GetUnicodeCategory('☮'));
Console.WriteLine(char.GetUnicodeCategory('₽'));
Console.WriteLine(char.GetUnicodeCategory('П'));
Console.WriteLine(char.GetUnicodeCategory('t'));
Console.WriteLine(char.GetUnicodeCategory('Ⅳ'));
Console.WriteLine(char.GetUnicodeCategory('¼'));
Console.WriteLine(char.GetUnicodeCategory(' '));
Console.WriteLine(char.GetUnicodeCategory('^'));
Console.WriteLine(char.GetUnicodeCategory('-'));
Console.WriteLine(char.GetUnicodeCategory('+'));

// 12.5. Найдите и попробуйте метод, определяющий, находится ли символ между двух других символов.
Console.WriteLine("\n-----------------IsBetween-----------------");

Console.WriteLine(char.IsBetween('t', 'a', 'z'));
Console.WriteLine(char.IsBetween('7', '0', '9'));
Console.WriteLine(char.IsBetween('Ё', 'А', 'Я'));

// 12.6. Найдите и попробуйте метод, приводящий букву к нижнему регистру.
Console.WriteLine("\n-----------------ToLower-----------------");

Console.WriteLine(char.ToLower('U'));
Console.WriteLine(char.ToLower('Ж'));
Console.WriteLine(char.ToLower('x'));
Console.WriteLine(char.ToLower('4'));


/**********************************************************************************
    13. Вам нужно сравнить два символа без учёта регистра, то есть, например,
        'a' должно считаться равным 'A'. Как бы вы это сделали?
**********************************************************************************/

Console.WriteLine("\n-----------------Comparison ignoring case-----------------");

char symbol1 = 'a';
char symbol2 = 'A';

/*
    Перед сравнением нужно привести символы к одинаковому регистру, например, используя метод "ToUpper" или "ToUpperInvariant".    
    Предпочтительнее использовать "ToUpperInvariant", так как он будет работать чуть быстрее из-за того, что использует,
    так называемую, инвариантную культуру, и не учитывает какие-то специфичные для текущего языка символы и правила.
    В данном случае этого будет достаточно, потому что мы не выводим изменённый символ пользователю, а просто хотим
    нормализовать два символа для возможности их сравнения. Подробнее про культуры мы поговорим на уроке по сравнению строк.
*/

Console.WriteLine(char.ToUpperInvariant(symbol1) == char.ToUpperInvariant(symbol2));
